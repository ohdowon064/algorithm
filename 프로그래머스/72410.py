"""
문제
1. 아이디 길이 3이상 15이하
2. 소문자, 숫자, (-), (_), (.)만 사용가능
3. (.)는 처음, 끝에 사용 불가, 연속사용 불가
4. 규칙 맞지않는 경우 아이디 추천

추천 규칙
1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.
-> 소문자로 치환
2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.
-> 소문자, 숫자, -, _, . 제외한 문제 제거
3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.
-> 마침표(.) 연속 사용시 하나 마침표로 치환
4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.
-> 양끝의 마침표(.) 제거
5단계 new_id가 빈 문자열이라면, new_id에 "a"를 대입합니다.
-> 빈 문자열일 경우 a 대입
6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.
     만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
-> 16자 이상이면 15초과 글자  제거
-> 제거 후 마침표가 끝에 있으면 제거
7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.
-> 2자 이하면 마지막 문자를 3이 될 때까지 반복추가

알고리즘
1. 문제가 굉장히 친절하다.
2. 단계대로 정규식을 사용해서 하나씩 처리한다.
"""
import re

def solution(new_id):
    # 1단계 : 소문자 치환
    step1 = new_id.lower()

    # 2단계 : 소문자, 숫자, -, _, . 제외 삭제
    step2 = re.sub('[^a-z0-9-_.]', '', step1)

    # 3단계 : 연속 사용 마침표(.)를 하나로 치환
    step3 = re.sub('\.+', '.', step2)

    # 4단계 : 양 끝 마침표(.) 제거
    step4 = step3.strip('.')

    # 5단계 : 빈 문자열이면 a 추가
    step5 = 'a' if step4 == '' else step4

    # 6단계 : 16이상이면 15글자 초과 글자 삭제 후 양 끝 마침표(.) 제거
    step6 = step5[:15].strip('.')

    # 7단계 : 길이 2이하이면 3이될 때까지 마지막 글자 추가
    add_letters = step6[-1] * (3 - len(step6))
    step7 = step6 + add_letters

    return step7